{#


 This docker-compose file is a jinja2 template.
 Before utilizing, use an appropriate configuration
 settings file to generate the compose and dockerfiles

 If you have python on your host system, execute the config
 script directly: 
 python config-compose.py --profile desktop.yml

 If you don't have python handy, then whip up a quick container.
 Power Shell: ./config-compose.ps1 desktop.yml
 Linux:       ./config-compose.sh  desktop.yml
   

-#}
#
#
# profile:   {{ profile_name }}
# generated: {{ now }} 
#
# This docker-compose and daughter Dockerfiles were generated from the source
# template using the config-compose.py script.  The script applies a predefined profile
# to a jinja2 template located in the templates directory.
#
# Aside from the configuration step all secrets must be provided via the usual .env file.
# 
# POSTGRESQL_SU_PASS: super or privileged user for database
# POSTGRES_CIP_PASS : cipsrv user password
# POSTGRES_USR_PASS : cipsrv_user user password
# POSTGRES_UPL_PASS : cipsrv_upload user password
# POSTGREST_PASS    : cipsrv_pgrest user password
# JUPYTER_TOKEN     : jupyter server token, a value of "easy" will forgo this
# CIPSRV_DEPLOYKEY  : if the github repository requires a deploy key, provide here
#                     example: ./mydeploykey for mydeploykey.ppk and mydeploykey.pub
#
#
name: cipsrv-docker-compose
services:
{%- if 'cip_pg' in components and 'type' in components.cip_pg and components.cip_pg.type == "container" %}
{%-    set configval = components.cip_pg.config %}
   cip_pg:
      build:
         context: .
         dockerfile: Dockerfile.pg
         shm_size: '2gb' 
      shm_size: {{ postgresql_config[configval].shm_size }}
      hostname: cip_pg
      environment:
{%-   if 'db' in components.cip_pg and components.cip_pg.db == "env.POSTGRESQL_DB" %}
         POSTGRES_DB:             ${POSTGRESQL_DB}
{%-   else %}
         POSTGRES_DB:             {{ components.cip_pg.db }}
{%-   endif %}
         POSTGRES_PASSWORD:       ${POSTGRESQL_SU_PASS}
         POSTGRES_CIP_PASS:       ${POSTGRESQL_CIP_PASS}
         POSTGRES_USR_PASS:       ${POSTGRESQL_USR_PASS}
         POSTGRES_UPL_PASS:       ${POSTGRESQL_UPL_PASS}
         POSTGREST_PASS:          ${POSTGREST_PASS}
         PG_MAX_CONNECTIONS:      {{ postgresql_config[configval].max_connections }}   
         PG_SHARED_BUFFERS:       {{ postgresql_config[configval].shared_buffers }}      
         PG_EFFECTIVE_CACHE_SIZE: {{ postgresql_config[configval].effective_cache_size }}
         PG_MAINTENANCE_WORK_MEM: {{ postgresql_config[configval].maintenance_work_mem }}
         PG_CHECKPOINT_COMP_TARG: {{ postgresql_config[configval].checkpoint_comp_targ }}
         PG_WAL_BUFFERS:          {{ postgresql_config[configval].wal_buffers }}         
         PG_DEF_STATISTICS_TARG:  {{ postgresql_config[configval].def_statistics_targ }} 
         PG_RANDOM_PAGE_COST:     {{ postgresql_config[configval].random_page_cost }}     
         PG_EFFECTIVE_IO_CONC:    {{ postgresql_config[configval].effective_io_conc }}     
         PG_WORK_MEM:             {{ postgresql_config[configval].work_mem }}             
         PG_MIN_WAL_SIZE:         {{ postgresql_config[configval].min_wal_size }}        
         PG_MAX_WAL_SIZE:         {{ postgresql_config[configval].max_wal_size }}         
         PG_MAX_WORKER_PROCESSES: {{ postgresql_config[configval].max_worker_processes }} 
         PG_MAX_PAR_WORK_PER_GAT: {{ postgresql_config[configval].max_par_work_per_gat }} 
         PG_MAX_PAR_WORKERS:      {{ postgresql_config[configval].max_par_workers }}      
         PG_MAX_PAR_MAINT_WORK:   {{ postgresql_config[configval].max_par_maint_work  }}  
{%-    if 'external_port' in components.cip_pg and components.cip_pg.external_port is not none %}
      ports:
         - target: 5432
           published: {{ components.cip_pg.external_port }}
{%-    endif %}
      networks:
         - cip
      volumes:
         - type: volume
           source: pgdata
           target: /var/lib/postgresql/data
         - type: volume
           source: tblspdata
           target: /tblspdata
{%- endif %}
{%- if 'cip_pr' in components and 'type' in components.cip_pr and components.cip_pr.type == "container" %}
   cip_pr:
      build:
         context: .
         dockerfile: Dockerfile.pr
         args:
{%-    if 'db' in components.cip_pg and components.cip_pg.db == "env.POSTGRESQL_DB" %}
            ARG_POSTGRES_DB:    ${POSTGRESQL_DB}
{%-    else %}
            ARG_POSTGRES_DB:    {{ components.cip_pg.db }}
{%-    endif %}
{%-    if 'host' in components.cip_pg and components.cip_pg.host == "env.POSTGRESQL_HOST" %}
            ARG_POSTGRES_HOST:  ${POSTGRESQL_HOST}
{%-    else %}
            ARG_POSTGRES_HOST:  {{ components.cip_pg.host }}
{%-    endif %}
{%-    if 'port' in components.cip_pg and components.cip_pg.port == "env.POSTGRESQL_PORT" %}
            ARG_POSTGRES_PORT:  ${POSTGRESQL_PORT}
{%-    else %}
            ARG_POSTGRES_PORT:  {{ components.cip_pg.port }}
{%-    endif %}
            ARG_POSTGREST_PASS: ${POSTGREST_PASS}
      shm_size: '1gb' 
      hostname: cip_pr
      environment:
         PGRST_SERVER_HOST:       cip_pr
         PGRST_SERVER_PORT:       3000
         PGRST_DB_SCHEMA:         cipsrv_pgrest
         PGRST_DB_ANON_ROLE:      cipsrv_pgrest        
{%-    if 'external_port' in components.cip_pr and components.cip_pr.external_port is not none %}
      ports:
         - target: 3000
           published: {{ components.cip_pr.external_port }}
{%-    endif %}
      networks:
         - cip
{%-    if 'add_host_gateway' in components.cip_pr and components.cip_pr.add_host_gateway == true %}
      extra_hosts:
         - host.docker.internal:host-gateway
{%-    endif %}

{%- endif %}
{%- if 'cip_jp' in components and 'type' in components.cip_jp and components.cip_jp.type == "container" %}
   cip_jp:
      build:
         context: .
         dockerfile: Dockerfile.jp
         args:
{%-    set ghrep = components.cip_jp.github_repo %}
{%-    set ghkey = github_repo[components.cip_jp.github_repo].add_deploy_key %}
{%-    if 'github_repo' in components.cip_jp and components.cip_jp.github_repo == true %}
            ARG_CIPSRV_DEPLOYKEY: ${CIPSRV_DEPLOYKEY}
{%-    endif %}
            ARG_JUPYTER_TOKEN:   ${JUPYTER_TOKEN}
      shm_size: '1gb' 
      hostname: cip_jp
      environment:
{%-    if 'db' in components.cip_pg and components.cip_pg.db == "env.POSTGRESQL_DB" %}
         POSTGRES_DB:             ${POSTGRESQL_DB}
{%-    else %}
         POSTGRES_DB:             {{ components.cip_pg.db }}
{%-    endif %}
{%-    if 'host' in components.cip_pg and components.cip_pg.host == "env.POSTGRESQL_HOST" %}
         POSTGRES_HOST:           ${POSTGRESQL_HOST}
{%-    else %}
         POSTGRES_HOST:           {{ components.cip_pg.host }}
{%-    endif %}
{%-    if 'port' in components.cip_pg and components.cip_pg.port == "env.POSTGRESQL_PORT" %}
         POSTGRES_PORT:           ${POSTGRESQL_PORT}
{%-    else %}
         POSTGRES_PORT:           {{ components.cip_pg.port }}
{%-    endif %}
{%-    if 'rds_master_user' in components.cip_pg and components.cip_pg.rds_master_user == "env.RDS_MASTER_USER" %}
         RDS_MASTER_USER:         ${RDS_MASTER_USER}
{%-    endif %}
         POSTGRES_CIP_PASS:       ${POSTGRESQL_CIP_PASS}
         POSTGRES_USR_PASS:       ${POSTGRESQL_USR_PASS}
         POSTGREST_PASS:          ${POSTGREST_PASS}    
         GITHUB_REPO_URL:         {{ github_repo[ghrep].url }}
         GITHUB_DEFAULT_BRANCH:   {{ github_repo[ghrep].default_branch }}
{%-    set s3buc = components.cip_jp.dump_s3 %}
{%-    set s3url = s3_bucket[s3buc].url %}
         S3_BUCKET:               {{ s3url }}
{%-    if 'external_port' in components.cip_jp and components.cip_jp.external_port is not none %}
      ports:
         - target: 8888
           published: {{ components.cip_jp.external_port }}
{%-    endif %}
      networks:
         - cip
{%-    if 'add_host_gateway' in components.cip_jp and components.cip_jp.add_host_gateway == true %}
      extra_hosts:
         - host.docker.internal:host-gateway
{%-    endif %}
      volumes:
         - type: volume
           source: jupyter
           target: /opt/conda/etc/jupyter
         - type: volume
           source: home-jovyan
           target: /home/jovyan
{%- endif %}
{%- if 'cip_ng' in components and 'type' in components.cip_ng and components.cip_ng.type == "container" %}
   cip_ng:
      build:
         context: .
         dockerfile: Dockerfile.ng
         args:
{%-    if 'host' in components.cip_pr and components.cip_pr.host == "env.POSTGREST_HOST" %}
            ARG_POSTGREST_HOST: ${POSTGREST_HOST}
{%-    endif %}
{%-    if 'port' in components.cip_pr and components.cip_pr.port == "env.POSTGREST_PORT" %}
            ARG_POSTGREST_PORT: ${POSTGREST_PORT}
{%-    else %}
{%-       if 'remote_port' in components.cip_pr and components.cip_pr.remote_port == "env.POSTGREST_PORT" %}
            ARG_POSTGREST_PORT: ${POSTGREST_PORT}
{%-       endif %}
{%-    endif %}
      hostname: cip_ng
{%-    if 'external_port' in components.cip_ng and components.cip_ng.external_port is not none %}
      ports:
         - target: 80
           published: {{ components.cip_ng.external_port }}
{%-    endif %}
      networks:
         - cip
{%-    if 'add_host_gateway' in components.cip_ng and components.cip_ng.add_host_gateway == true %}
      extra_hosts:
         - host.docker.internal:host-gateway
{%-    endif %}
{%- endif %}
networks:
   cip:
      driver: bridge
volumes:
{%- if 'type' in components.cip_pg and components.cip_pg.type == "container" %}
   tblspdata:
   pgdata:
{%- endif %}
   jupyter:
   home-jovyan:
