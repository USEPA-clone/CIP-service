# -*- coding: utf-8 -*-import arcpy;import requests;g_dmap_host = "https://cip-api.dmap-stage.aws.epa.gov";g_dmap_port = 443;class Toolbox(object):   def __init__(self):      self.label = "Toolbox"      self.alias = "toolbox"      self.tools = [CIPIndex]class CIPIndex(object):   def __init__(self):      self.label = "CIPIndex"      self.description = ""      self.canRunInBackground = False   def getParameterInfo(self):         boo_bad = False;      clip_list = [];      filter_list = [];      status_message = None;            ##---------------------------------------------------------------------##      #if not checkDMAP():      #   boo_bad = True;      #   status_message = "Unable to contact DMAP API";            #else:      #   (clip_list,filter_list,error_code,status_message) = getDomains();      #   if error_code != 0:      #      boo_bad = True;                   ##---------------------------------------------------------------------##      param0 = arcpy.Parameter(          displayName   = "Status Message"         ,name          = "StatusMessage"         ,datatype      = "GPString"         ,parameterType = "Optional"         ,direction     = "Input"         ,enabled       = boo_bad      );      param0.value = status_message;            ##---------------------------------------------------------------------##      param1 = arcpy.Parameter(          displayName   = "Sketch Geometry"         ,name          = "Sketch Geometry"         ,datatype      = "GPFeatureRecordSetLayer"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = boo_bad      );            ##---------------------------------------------------------------------##      param2 = arcpy.Parameter(          displayName   = "NHDPlus Resolution"         ,name          = "NHDPlusResolution"         ,datatype      = "GPString"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param2.filter.type = "ValueList";      param2.filter.list = ['medium','high'];      param2.value       = 'medium';            ##---------------------------------------------------------------------##      param3 = arcpy.Parameter(          displayName   = "Clip By"         ,name          = "ClipBy"         ,datatype      = "GPString"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param3.filter.type = "ValueList";      param3.filter.list = clip_list;      #param3.value       = None;            ##---------------------------------------------------------------------##      param4 = arcpy.Parameter(          displayName   = "Filter By"         ,name          = "FilterBy"         ,datatype      = "GPString"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param4.filter.type = "ValueList";      param4.filter.list = filter_list;      #param4.value       = None;            ##---------------------------------------------------------------------##      param5 = arcpy.Parameter(          displayName   = "Default Point Indexing Method"         ,name          = "DefaultPointIndexingMethod"         ,datatype      = "GPString"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param5.filter.type = "ValueList";      param5.filter.list = ['Point - Simple'];      param5.value       = 'Point - Simple';            ##---------------------------------------------------------------------##      param6 = arcpy.Parameter(          displayName   = "Default Line Indexing Method"         ,name          = "DefaultLineIndexingMethod"         ,datatype      = "GPString"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param6.filter.type = "ValueList";      param6.filter.list = ['Line - Simple','Line - LevelPath'];      param6.value       = 'Line - LevelPath';            ##---------------------------------------------------------------------##      param7 = arcpy.Parameter(          displayName   = "Default Ring Indexing Method"         ,name          = "DefaultRingIndexingMethod"         ,datatype      = "GPString"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param7.filter.type = "ValueList";      param7.filter.list = ['Area - Simple','Area - Centroid','Area - Artificial Paths','Treat Rings as Lines'];      param7.value       = 'Area - Simple';            ##---------------------------------------------------------------------##      param8 = arcpy.Parameter(          displayName   = "Default Area Indexing Method"         ,name          = "DefaultAreaIndexingMethod"         ,datatype      = "GPString"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param8.filter.type = "ValueList";      param8.filter.list = ['Area - Simple','Area - Centroid','Area - Artificial Paths'];      param8.value       = 'Area - Simple';            ##---------------------------------------------------------------------##      param9 = arcpy.Parameter(          displayName   = "Linear Threshold"         ,name          = "LinearThreshold"         ,datatype      = "GPDouble"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param9.value = 10;            ##---------------------------------------------------------------------##      param10 = arcpy.Parameter(          displayName   = "Area Catchment Threshold"         ,name          = "AreaCatchmentThreshold"         ,datatype      = "GPDouble"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param10.value = 50;            ##---------------------------------------------------------------------##      param11 = arcpy.Parameter(          displayName   = "Area Event Threshold"         ,name          = "AreaEventThreshold"         ,datatype      = "GPDouble"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param11.value = 1;            ##---------------------------------------------------------------------##      param12 = arcpy.Parameter(          displayName   = "Show Flowlines"         ,name          = "ShowFlowlines"         ,datatype      = "GPBoolean"         ,parameterType = "Required"         ,direction     = "Input"         ,enabled       = True      );      param12.value = True;            params = [          param0         ,param1         ,param2         ,param3         ,param4         ,param5         ,param6         ,param7         ,param8         ,param9         ,param10         ,param11         ,param12      ];      return params   def isLicensed(self):      return True;   def updateParameters(self, parameters):      return;   def updateMessages(self, parameters):      return;   def execute(self, parameters, messages):            return;   def postExecute(self, parameters):      return;   def checkDMAP():         response = requests.get(g_dmap_host + ':' + g_dmap_port + '/rpc/healthcheck');            if response.status_code == 200:         return True;               else:         return False;      def getDomains():         response = requests.get(g_dmap_host + ':' + g_dmap_port + '/rpc/cipsrv_domains');            if response.status_code == 200:         json = response.json();                                 else:         return ([],[],-1,'Unable to fetch domain list from DMAP API');